function [S,G] = getRandomPoints(Ns,Ng,bound,R)

% This function randomly choose points that are within the 
% bounds spaced R apart.

% Inputs: - Ns, Number of starting locations
%         - Ng, Number of goal locations
%         - bound, [xmin xmax ymin ymax zmin zmax] bounding box that permits acceptable point locations
%         - R, minimum separation of points
%         - timeout, if points haven't been found abort function

% Outputs:    - S, non colliding starting points within bound
%             - G, non colliding goal points within bound
%             - success, function terminated within timeout = 1, else = 0

% start the timer for timeout
tic;

S = []; %we don't want to preallocate here
G = []; %we don't want to preallocate here

for i = 1:Ns
   % Generate a random point
   pt = [ (bound(2)-bound(1))*rand()+bound(1), (bound(4)-bound(3))*rand()+bound(3), (bound(6)-bound(5))*rand()+bound(5)];
   
   % add pt to the list of pts
   if isempty(S);
       % add the first point to the list
       S(1,:) = pt;
   else
       new_point_found = 0;
       while ~new_point_found
           % Check pt doesn't collide with other start pts
           ptlist = repmat(pt,size(S,1),1);
           Rmin = min(pdist2(ptlist,S,'euclidean','Smallest',1));
           if Rmin>R*sqrt(2)
               new_point_found = 1;
           else
               % Generate a random point
               pt = [ (bound(2)-bound(1))*rand()+bound(1), (bound(4)-bound(3))*rand()+bound(3), (bound(6)-bound(5))*rand()+bound(5)];
           end
       end
       % add this non-colliding point to list
       S = [S;pt];       
   end
end

for i = 1:Ng
   % Generate a random point
   pt = [ (bound(2)-bound(1))*rand()+bound(1), (bound(4)-bound(3))*rand()+bound(3), (bound(6)-bound(5))*rand()+bound(5)];
   
   % Check pt doesn't collide with other goal pts
   
   % add point to list
   G(i,:) = pt;
   
end

end